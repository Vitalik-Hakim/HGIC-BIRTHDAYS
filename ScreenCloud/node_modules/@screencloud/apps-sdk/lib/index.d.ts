import { AppConfig, AppContext, InitializeMessagePayload } from "./types";
/**
 * The main interface between your app and the Player running it.
 *
 * Use this to interact with the app lifecycle, and get details about
 * the user like their config and theme settings.
 *
 * See https://screencloud.github.io/developer/ for full descriptions.
 *
 * You should always use the methods available here, rather than going
 * directly to the Player (where the API could change at any time).
 */
declare class ScreenCloud<TConfig = AppConfig> {
    private parentOrigin?;
    private resolveInitialize?;
    private rejectInitialize?;
    private initializePayload?;
    private onAppStartedPromise;
    private resolveOnAppStarted?;
    constructor();
    /**
     * Ensure we have the crucial Initialize payload before continuing.
     *
     * This is called automatically by connectScreenCloud(), you do not ever need to call it manually.
     *
     * If testData given, then merge with a sample payload, then resolve Initialize manually below with that object.
     * If the real initialize then comes later, warn user that they have shipped their test data to a real player.
     */
    connect: (testData?: Partial<InitializeMessagePayload<TConfig>> | undefined) => Promise<InitializeMessagePayload<TConfig>>;
    /**
     * To develop and test your app outside of a Player, you can manually
     * call this method with the data the Player would normally provide.
     *
     * Just call the connect() method (without using its testData option),
     * then `sc.initialize(yourData)` afterwards.
     *
     * This is useful in scenarios where you want to provide data from outside the
     * app codebase, e.g. an e2e test.
     *
     * Be careful not to call this in production however, as it will overrule
     * any data later received from the real player.
     */
    initialize: (payload?: Partial<InitializeMessagePayload<TConfig>> | undefined) => void;
    /**
     * When running outside of a player, e.g. local development,
     * you can call this manually to "start" the app.
     * i.e. to tell your app to switch from preloading to "visible on screen" mode
     */
    start: () => void;
    /**
     * Get the data provided by a user in the app settings pages.
     */
    getConfig: () => TConfig;
    /**
     * Get information about the environment the app is running it.
     */
    getContext: () => AppContext;
    /**
     * Has the app started? i.e. is it visible on screen, or still preloading?
     */
    onAppStarted: () => Promise<boolean>;
    /**
     * PostMessage received. Parse it.
     */
    private onMessage;
    /**
     * Handle messages sent from the parent.
     */
    private handleMessage;
    /**
     * Store data passed from the Player on startup.
     */
    private handleInitialize;
    /**
     * App is now on screen, update status to track this.
     */
    private handleStart;
    /**
     * PostMessage to parent (player).
     */
    private sendMessage;
}
/**
 * Kick off the app.
 *
 * This will resolve with the `sc` object only when we've received the Initialize data,
 * i.e. when app is able to start loading.
 *
 * If you provide testData, we will assume you're running in development. Your test
 * data will be merged with sample data, then used to initialize the app.
 *
 * We will also automatically "start" the app (So you won't be stuck on preloading).
 *
 * To develop preloading locally, do not provide testData here.
 *
 * Instead, manually call `sc.initialize(testData)` and then `sc.start()` when you choose.
 */
export declare const connectScreenCloud: <TConfig = AppConfig>(testData?: Partial<InitializeMessagePayload<TConfig>> | undefined) => Promise<ScreenCloud<TConfig>>;
/**
 * Get the SC instance.
 */
export declare const getScreenCloud: <TConfig = AppConfig>() => ScreenCloud<TConfig>;
export {};
