export interface ScreenCloud<TConfig> {
    appStarted: boolean;
    context: AppContext;
    appId: string;
    config: TConfig;
}
interface ThemeColor {
    "100": string;
    "200": string;
    "300": string;
    "400": string;
    "500": string;
    "600": string;
    "700": string;
    "800": string;
    "900": string;
}
interface ThemeFont {
    family: string;
    url: string;
}
export interface Theme {
    primaryColor: ThemeColor;
    textOnPrimary: ThemeColor;
    textOnSecondary: ThemeColor;
    secondaryColor: ThemeColor;
    headingFont?: ThemeFont;
    bodyFont?: ThemeFont;
    id: string;
    name: string;
}
/**
 * The config for this specific instance.
 * This is set by users of your app inside Studio.
 */
export interface AppConfig {
    [key: string]: any;
}
declare type region = "eu" | "us";
interface PayloadAppContext {
    theme?: Theme;
    screenData?: ScreenData;
    userInteractionEnabled: boolean;
    loggingLevel: number;
    playerHeight: number;
    playerWidth: number;
    region: region;
    timezone: string;
    appViewerToken: string;
}
export interface AppContext extends PayloadAppContext {
    appId: string;
    appInstanceId: string;
    orgId: string;
    spaceId: string;
    screenId?: string;
    device: DeviceConfig;
    filesByAppInstanceId: {
        nodes: Array<PlayerFile>;
    };
    durationMs?: number;
    durationElapsedMs?: number;
}
/**
 * Key:value pairs of strings that can be attached to any screen in Studio.
 * This lets your apps read screen-specific data and work differently as needed.
 * e.g. "storeId": "123"
 */
export interface ScreenData {
    [key: string]: string;
}
export interface InitializeMessagePayload<TConfig> {
    appId: string;
    appInstanceId: string;
    config: TConfig;
    context: PayloadAppContext;
    orgId: string;
    spaceId: string;
    screenId?: string;
    device: DeviceConfig;
    filesByAppInstanceId: {
        nodes: Array<PlayerFile>;
    };
    durationMs?: number;
    durationElapsedMs?: number;
}
export declare type Platform = "studio" | "android" | "firetv" | "chrome" | "ios" | "embeddable" | "msteams";
export interface DeviceConfig {
    platform?: Platform;
    model?: string;
    version?: string;
}
export declare type FileMediaType = "image" | "video" | "audio" | "document";
interface PlayerFileBase {
    availableAt: null | string;
    expireAt: null | string;
    height: number | undefined;
    id: string;
    name: string;
    size: number;
    width: number | undefined;
    type: FileMediaType;
    orgId: string;
}
export declare type Mimetype = string;
export interface ImageFile extends PlayerFileBase {
    type: "image";
    urlKey: string;
    mimetype: Mimetype;
}
export interface VideoFile extends PlayerFileBase {
    type: "video";
    urlKey: string;
    mimetype: Mimetype;
    thumbnail?: string;
}
export interface AudioFile extends PlayerFileBase {
    type: "audio";
    mimetype: Mimetype;
    urlKey: string;
}
export interface DocumentFile extends PlayerFileBase {
    type: "document";
    images: ImageFile[];
}
export declare type PlayerFile = ImageFile | VideoFile | AudioFile | DocumentFile;
export {};
