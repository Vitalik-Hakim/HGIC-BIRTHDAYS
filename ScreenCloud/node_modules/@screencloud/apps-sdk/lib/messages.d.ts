import { CONNECT, CONNECT_SUCCESS, INITIALIZED, START, STARTED } from "./constants";
import { InitializeMessagePayload } from "./types";
/**
 * Messages created by the App, and sent to the Player.
 */
export declare type AppMessage = ConnectMessage | InitializedMessage | StartedMessage;
/**
 * Messages created by the Player, and send to the app.
 */
export declare type PlayerMessage<T> = ConnectSuccessMessage | InitializeMessage<T> | StartMessage;
export interface ConnectMessage {
    type: typeof CONNECT;
}
export declare const connectMessage: () => ConnectMessage;
export interface InitializedMessage {
    type: typeof INITIALIZED;
}
export declare const initializedMessage: () => InitializedMessage;
export interface StartedMessage {
    type: typeof STARTED;
}
export declare const startedMessage: () => StartedMessage;
/**
 * Messages the Parent can send
 */
export interface ConnectSuccessMessage {
    type: typeof CONNECT_SUCCESS;
}
export interface InitializeMessage<T> {
    type: "initialize";
    payload: InitializeMessagePayload<T>;
}
export declare const initializeMessage: <T>(payload: InitializeMessagePayload<T>) => InitializeMessage<T>;
export interface StartMessage {
    type: typeof START;
}
