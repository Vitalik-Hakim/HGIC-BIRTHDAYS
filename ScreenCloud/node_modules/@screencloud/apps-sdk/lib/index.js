var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { CONNECT, CONNECT_SUCCESS, INITIALIZE, LOG_PREFIX, SAMPLE_INITIALIZE_PAYLOAD, START, } from "./constants";
import { connectMessage, initializedMessage, initializeMessage, startedMessage, } from "./messages";
import { mergeInitializePayloads } from "./utils/objectUtils";
import { parseMessage, sendMessage } from "./utils/postMessage";
var sc; // Type will depend on user's given runtime config type, so need to store this reference as any.
/**
 * The main interface between your app and the Player running it.
 *
 * Use this to interact with the app lifecycle, and get details about
 * the user like their config and theme settings.
 *
 * See https://screencloud.github.io/developer/ for full descriptions.
 *
 * You should always use the methods available here, rather than going
 * directly to the Player (where the API could change at any time).
 */
var ScreenCloud = /** @class */ (function () {
    function ScreenCloud() {
        var _this = this;
        /**
         * Ensure we have the crucial Initialize payload before continuing.
         *
         * This is called automatically by connectScreenCloud(), you do not ever need to call it manually.
         *
         * If testData given, then merge with a sample payload, then resolve Initialize manually below with that object.
         * If the real initialize then comes later, warn user that they have shipped their test data to a real player.
         */
        this.connect = function (testData) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.resolveInitialize = resolve;
                        _this.rejectInitialize = reject;
                        if (testData) {
                            _this.initialize(testData);
                        }
                    })];
            });
        }); };
        /**
         * To develop and test your app outside of a Player, you can manually
         * call this method with the data the Player would normally provide.
         *
         * Just call the connect() method (without using its testData option),
         * then `sc.initialize(yourData)` afterwards.
         *
         * This is useful in scenarios where you want to provide data from outside the
         * app codebase, e.g. an e2e test.
         *
         * Be careful not to call this in production however, as it will overrule
         * any data later received from the real player.
         */
        this.initialize = function (payload) {
            if (!_this.resolveInitialize) {
                console.warn(LOG_PREFIX +
                    "Error: You must call connect() to connect to the player, before you initialize() with test data.");
                return;
            }
            var combinedPayload = mergeInitializePayloads(
            // Casting as sample config can't know the user's config type ahead of time
            SAMPLE_INITIALIZE_PAYLOAD, payload || {});
            _this.handleInitialize(initializeMessage(combinedPayload));
        };
        /**
         * When running outside of a player, e.g. local development,
         * you can call this manually to "start" the app.
         * i.e. to tell your app to switch from preloading to "visible on screen" mode
         */
        this.start = function () {
            _this.handleStart();
        };
        /**
         * Get the data provided by a user in the app settings pages.
         */
        this.getConfig = function () {
            var _a;
            if (!_this.initializePayload) {
                var err = "Error: Tried to getConfig() before the app was initialized. Check that you waited for connectScreenCloud() to resolve before starting your app.";
                console.warn(LOG_PREFIX + err);
                throw err;
            }
            return (_a = _this.initializePayload) === null || _a === void 0 ? void 0 : _a.config;
        };
        /**
         * Get information about the environment the app is running it.
         */
        this.getContext = function () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            if (!_this.initializePayload) {
                var err = "Error: Tried to getContext() before the app was initialized. Check that you waited for connectScreenCloud() to resolve before starting your app.";
                console.warn(LOG_PREFIX + err);
                throw err;
            }
            return __assign(__assign({}, (_a = _this.initializePayload) === null || _a === void 0 ? void 0 : _a.context), { appId: (_b = _this.initializePayload) === null || _b === void 0 ? void 0 : _b.appId, appInstanceId: (_c = _this.initializePayload) === null || _c === void 0 ? void 0 : _c.appInstanceId, orgId: (_d = _this.initializePayload) === null || _d === void 0 ? void 0 : _d.orgId, spaceId: (_e = _this.initializePayload) === null || _e === void 0 ? void 0 : _e.spaceId, screenId: (_f = _this.initializePayload) === null || _f === void 0 ? void 0 : _f.screenId, device: (_g = _this.initializePayload) === null || _g === void 0 ? void 0 : _g.device, filesByAppInstanceId: (_h = _this.initializePayload) === null || _h === void 0 ? void 0 : _h.filesByAppInstanceId, durationMs: (_j = _this.initializePayload) === null || _j === void 0 ? void 0 : _j.durationMs, durationElapsedMs: (_k = _this.initializePayload) === null || _k === void 0 ? void 0 : _k.durationElapsedMs });
        };
        /**
         * Has the app started? i.e. is it visible on screen, or still preloading?
         */
        this.onAppStarted = function () {
            return _this.onAppStartedPromise;
        };
        /**
         * PostMessage received. Parse it.
         */
        this.onMessage = function (event) {
            try {
                var message = parseMessage(event);
                if (process.env.NODE_ENV === "development") {
                    console.log(LOG_PREFIX + "Received message", message);
                }
                // Use the URL of the responding SUCCESS event as the target for future messages.
                if (message.type === CONNECT_SUCCESS) {
                    // TODO - Whitelist to localhosts, 127.0.0.1, screen.cloud etc.
                    _this.parentOrigin = event.origin;
                }
                _this.handleMessage(message);
            }
            catch (e) {
                console.log(LOG_PREFIX + e);
            }
        };
        /**
         * Handle messages sent from the parent.
         */
        this.handleMessage = function (message) {
            switch (message.type) {
                case CONNECT_SUCCESS:
                    console.log(LOG_PREFIX + "Connected to parent player.");
                    break;
                case INITIALIZE:
                    _this.handleInitialize(message);
                    break;
                case START:
                    _this.handleStart();
                    break;
            }
        };
        /**
         * Store data passed from the Player on startup.
         */
        this.handleInitialize = function (message) {
            if (_this.initializePayload) {
                console.warn(LOG_PREFIX +
                    "It looks like you've deployed with your testData included. This is likely a bug. Data and config from the player are being ignored.");
                return;
            }
            if (!_this.resolveInitialize) {
                console.warn(LOG_PREFIX + "Error: Received init payload before we were ready for it.");
                return;
            }
            _this.initializePayload = message.payload;
            _this.sendMessage(initializedMessage());
            console.log(LOG_PREFIX + "Initialized with data", message.payload);
            _this.resolveInitialize(message.payload);
        };
        /**
         * App is now on screen, update status to track this.
         */
        this.handleStart = function () {
            if (_this.resolveOnAppStarted) {
                _this.resolveOnAppStarted(true);
            }
            else {
                console.warn(LOG_PREFIX + "Error: Could not resolve appStarted status.");
            }
            console.log(LOG_PREFIX + "Starting app on screen.");
            _this.sendMessage(startedMessage());
        };
        /**
         * PostMessage to parent (player).
         */
        this.sendMessage = function (message) {
            if (_this.parentOrigin) {
                sendMessage(message, _this.parentOrigin);
            }
            else {
                // The initial CONNECT message can be sent to any origin.
                if (message.type === CONNECT) {
                    sendMessage(message, "*");
                }
            }
        };
        window.addEventListener("message", this.onMessage, false);
        this.sendMessage(connectMessage());
        this.onAppStartedPromise = new Promise(function (resolve) {
            _this.resolveOnAppStarted = resolve;
        });
    }
    return ScreenCloud;
}());
/**
 * Kick off the app.
 *
 * This will resolve with the `sc` object only when we've received the Initialize data,
 * i.e. when app is able to start loading.
 *
 * If you provide testData, we will assume you're running in development. Your test
 * data will be merged with sample data, then used to initialize the app.
 *
 * We will also automatically "start" the app (So you won't be stuck on preloading).
 *
 * To develop preloading locally, do not provide testData here.
 *
 * Instead, manually call `sc.initialize(testData)` and then `sc.start()` when you choose.
 */
export var connectScreenCloud = function (testData) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                sc = new ScreenCloud();
                return [4 /*yield*/, sc.connect(testData)];
            case 1:
                _a.sent();
                if (testData) {
                    sc.start();
                }
                return [2 /*return*/, sc];
        }
    });
}); };
/**
 * Get the SC instance.
 */
export var getScreenCloud = function () {
    if (!sc) {
        console.warn(LOG_PREFIX +
            "Tried to fetch the SC object before app was initialized. Call startApp() first (which will also return the SC object).");
    }
    return sc;
};
